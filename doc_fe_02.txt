吉武一希
  15:00
単体テスト：単一機能でのテスト
ブラックボックステスト：プログラムの中身に着目せず、シナリオで決められた操作に対して、表記された正しい結果が返ってくるかをテストする
同値分析：入力・出力データをいくつかのグループ（同値クラス）に分け、その中の代表値を選出してテストする
境界値分析：分けたグループの狭間の値をテストケースに利用する
ホワイトボックステスト：モジュールの内部をテストする
フローチャートを用いてテストを行う
命令網羅：命令を全て通るようにテストする。分岐については考慮しない
分岐網羅：全ての分岐を通過するテストをする。結果的に命令も全て網羅する形になる
条件網羅：分岐を通過するのではなく判定条件を全て満たすようにテスト
条件網羅（単体）：複数条件がある場合でも、それぞれ別で条件の成否パターンをテストする
テストケースの中でそれぞれ単体の成否パターンを二種類試せば良いので、最短で2回で終わる
複数条件網羅：判定条件が条件A or 条件Bのように複数ある場合、どちらも組み合わせた条件パターンを全てテストする
結合テスト：機能間のインタフェースなどを利用して結合するテスト
ドライバ：上位モジュールのダミー
ボトムアップテストで利用
スタブ：下位モジュールのダミー
トップダウンテストで利用


吉武一希
  10:15
マネジメント分野
PMBOK
統合マネジメント
ステークホルダーマネジメント
コミュニケーションマネジメント
スコープマネジメント
資源マネジメント(続きから)

吉武一希
  3月3日 10:33
資源マネジメント：資源管理に関する
資源：経営を行う上で必要なもの
ヒト：業務を行うときに必要な人。これは変動が激しい。なぜなら割り当てる人の能力で業務が左右されるため。教育などを行い、改善していく
モノ
カネ
情報
作業ボリューム(工数)に合わせて資源を割り振りなどを行なっていく
関連する単語など
人月：作業ボリュームの単位
考え方は〇〇人月と出れば、1人で作業を行う場合を想定すると〇〇人月の「〇〇」に記載された値の月だけかかる計算
人数が増えるほどかかる日数が分配される
12人月を1人　→ 12ヶ月かかる
12人月を4人　→ 3ヶ月かかる
問題などの想定では基本的に人月の値そのものを100として、一旦、進捗を具合を考え後は問題文から計算する
もし想定通りに進捗が進んでいないなら、単純に能力不足


吉武一希
  3月3日 10:53
関連する問題
32 / 2 16
66 / 3 22
84 / 4 21
18 / 1 18
一日の量：10 * 500  5000
開発期間と想定ステップ：30日で150K
ある時点での進捗：10日経過時点　30K
残りの日数と必要開発ステップ：20日で120K
現在の能力のままで開発を進める　→ 60K分間に合わない
→　人数を増加で期間内に開発を間に合わせる


調達マネジメント
RFI：企業の情報を提供してもらうための依頼
目的：開発を実現できるか、会社自体に問題がないかなどの情報を得るため
RFP：実現してもらいたい、システムの提案を依頼する
目的：返ってきた提案を元に依頼するかどうか判断するため
このタイミングで、ベンダ側はシステム開発の企画立案を実施するはず（確証はない）


吉武一希
  11:26
コストマネジメント：プロジェクトに使用するコストの見積もりなど行ない管理する
プロジェクトの見積もり手法はさまざまだが、一般的に使われているものはFP法。
ソフトの各機能を数などの定量的に見積もり、その後重み付けや複雑さなどの調整を行い、FPを見積もる
理解度確認は後で帰宅後に行う


吉武一希
  11:43
スケジュールマネジメント：（PJ）期間などを管理する
視覚化のツール
ガントチャート：作業項目ごとに開始と終了の期間を視覚化したもの。WBSから算出されたりする
アローダイアグラム
考え方：開始地点が端のものはそこからスタートする
各地点ごとで一番時間がかかっている作業が終わるまではそのさきに進めないので待つことになる
ダミーに関しては作業日数はないが、矢印元と同時に作業を行う。ダミー前の作業が終われば始まると考えても良い
クリティカルパス：作業全体で必ずかかってしまう日数のこと
理解度確認のため、帰宅後に問題を解答


吉武一希
  12:05
リスクマネジメント：PJのチャンスとリスクに関しての
エスカレーション：対応策があるがPM自身の権限で実施することができない場合やPMの専門外の知識が必要になったり場合、上位者や関係者に掛け合うこと
活用：PJ内で新たに発見したビジネスチャンスや市場をリヨして新しいプロジェクトなどを立ち上げるきっかけとする
強化：PJの成功確率を上げるためにトレーニングなどを実施する
共有：PJで不透明性のあるリスクに対しては関連する役割の企業と提携してリスクを分担する
受容：PJ上で発生するリスクをそのままにして受け入れること


吉武一希
  13:52
品質マネジメント：製品・PJの品質のこと。またはそれを高める活動
QC七つ道具：品プロジェクトや製品の品質を可視化し、改善するための非常に便利なツールセット。このツールは問題を特定・データ分析などを実施、その後改善策を見つけるために使用
以下はツール
パレート図（Pareto Chart）: 最も重要な問題点を特定し、優先順位を付けるためのツールです。
特性要因図（Cause-and-Effect Diagram、フィッシュボーンダイアグラム）: 問題の原因を体系的に洗い出すためのツールです。
チェックシート（Check Sheet）: データを収集し、整理するためのツールです。
ヒストグラム（Histogram）: データの分布を視覚的に表現するためのツールです。
散布図（Scatter Diagram）: 2つの変数の関係を視覚的に表現するためのツールです。
管理図（Control Chart）: プロセスの安定性を監視するためのツールです。
層別（Stratification）: データをカテゴリに分けて分析するためのツールです。
質問と答え合わせ
ある結果には特定の原因があるのではないか？その候補を上げていき、その候補でさえもその原因は何なのかを細かく掘り下げていくのが特性要因図の書き方でよろしいですか？
解答と記載のステップ
おっしゃる通りです。特性要因図（フィッシュボーンダイアグラム）は、ある結果に対する原因を体系的に洗い出し、それぞれの原因の要因も掘り下げる手法です。以下は特性要因図の書き方の基本的なステップです。
1. **問題の明確化**: 図の右端に問題（結果）を書きます。
2. **主な原因カテゴリの特定**: 問題に影響を与える主なカテゴリ（要因）を魚の骨のように斜めの線で描き、その先にカテゴリを書きます。一般的なカテゴリには、人、方法、機械、材料、環境、測定などがあります。
3. **詳細な原因の特定**: 各カテゴリに対してさらに原因を洗い出します。これらの原因を主要なカテゴリの枝として描き、その先に詳細な原因を書きます。
4. **深掘り**: 洗い出した原因をさらに深掘りして、具体的な要因まで掘り下げます。これにより、問題の根本的な原因を明確にすることができます。。


吉武一希
  14:33
インシデント管理：サービスを提供できなくなる可能性のある出来事が発生した時の管理
最重要なのはサービスの迅速な回復
対応はサービスデスクが行う
解決が困難なら解決できる人材にエスカレーションを行う
問題管理：インシデントで起きた原因を調査する

インシデントが発生したらまず記録しておくこと
　　→ 同様の問題が問い合わせにすぐに対処できるため
障害報告が来たら、既知の誤りに該当するか照合を行う
問題の記録時にはその問題の発端となったインシデントとの相互参照を含めること
問題管理の目標としてはインシデントの根本原因を排除し、同じインシデントが発生しないように予防すること
問題管理の活動としては、発生したインシデントのデータおよび傾向を分析する
帰宅後にテストを実施する

変更・構成・リリースおよび展開の管理
問題管理で突き止めた原因を解決するための変更を必要のある部署に対してRFC（変更要求）を依頼する
変更の影響を検討：受け取った変更依頼の内容で実際に変更を実施したときの影響を検討する。その後承認するか却下するかを判断する
承認されればそのまま変更を実施する
却下ならそのまま流れる
構成管理：システムを構成しているアイテムの管理
構成しているアイテムOSやサーバ、データベースなどのバージョンなどに何らかの不具合が発生したときに、自社製品の同様のアイテムのバージョンが該当するかなどの確認を行うために格納しておく必要がある
各レコードを構成品目（CI）と呼ぶ