業務の事前準備のため引き続き動画視聴・トレーニングを行いました
基本技術者試験　短期集中講座
視聴範囲
セクション2 情報システム開発
・ウォーターフォール・アジャイル開発
・分析設計（DFD,ER図）
視聴内容
上記各項目の概要の説明から理解を深めるため過去問を用いて解説など


吉武一希
  11:23
基本情報技術者試験
アジャイル開発
システム開発手法の一つ
以下を価値とする
プロセス・ツール　＜　個人と対話
まとまったドキュメント　＜　完成した動くソフト
契約交渉　＜　顧客との協調
計画に従う　＜　都度都度の変化への柔軟な対応
さらにアジャイルの中で手法が分かれる
スクラム：チーム全体でコミュニケーションをとりながらプロジェクトを進めていく。
以下スクラムの構成
プロダクトオーナー
構成人数：1人~複数人
役割：①　作成する製品の具体的な内容を明確にし、共有する
②　開発にあたり実施するタスクの作成とその管理
③　作成したタスクの優先順位の明確化
④　開発の監視：プロジェクトが計画通りに進んでいるかを確認する
スプリントレビューで成果物の確認
デイリースクラムによる進捗の確認により、問題の把握
看板ボードなどの進捗を可視化できるツールを導入しステークホルダーへ報告
⑤　顧客の要求把握：インタビューやレビュー、ユーザーテストから顧客の要求を正確に把握し、必要なタスクを追加する
⑥ 顧客ニーズの予測・反映：市場調査、ビジョン設定、プロトタイピングとテストを実施し、顧客のニーズを予測する
プロダクトオーナーの主な役割：どんな製品を作りたいのか目標を設定して、現状を把握してそこから生まれるギャップを埋めるための課題特定とその解決を行なっていくという認識ですが良いですか？課題解決に一定以上の効果があると予想した製品のプロトタイプをユーザーにテストしてもらうことで顧客の反応を伺い、そのフィードバックをもとに修正を行いながらニーズに合った製品を作るということですか？


吉武一希
  12:06
スクラムマスタ
以下役割
スプリントスケジュールの進行
デイリースクラム（朝会）の開催
タスク内容の修正・改善
スプリントレビューの開催
スクラムチーム内外の問題解決
開発者 or 開発チーム
役割：プログラミングを行い、インクリメント（成果物）を作成する
スプリント：要件定義〜リリースまでを実施する短い期間を単位として呼称しているもの
プランニング：スプリント期間中にどのタスクを実施するのかを一覧化して共有する作業
そこで抽出したタスクをスプリントバックログ
それを抽出するのは開発者の役割
デイリースクラム：朝会。進捗会議が主
開発：スプリントバックログを元にした機能を実際に開発していく
スプリントレビュー：開発で作成した機能が実際に動いているかを確認する作業(プロダクトオーナー)
インクリメント（成果物）の承認はプロダクトオーナーが行う
レトルスペクティブ：スプリントに対する振り返りのこと。次のスプリントに反映するためが主な目的


吉武一希
  13:05
XP：アジャイル開発においての実践的な手法をまとめたもの
大事な５要素
コミュニケーション
シンプルさ
フィードバック
勇気
尊重
イテレーション：スプリントと同じアジャイルを行なっていくための短い期間のこと
手法
ペアプログラミング：2人一組で行うプログラミング
初心者が上級者に指導をしてもらう形のプログラミング
テスト駆動開発
各機能のテストシナリオに基づいたテストケースだけを作成した状態から、テストシナリオ通りに動くようにプログラムを作成すること。テストケースだけ作成するので初期段階では機能部分は空っぽ
リファクタリング
外から見たプログラムの動作自体は変えないが、柔軟性の向上や効率化を図ったりするため、内部のコードを修正すること
YAGNI
必要とされるコードだけを記述すること
必要のないものは作成しない
シンプルさにつながる
継続的インテグレーション or CI（すぐに統合）
少しのシステムですぐに組み込むこと
以前では変更する細かい仕様はある時点まで貯めてから、一気に解消していた
CIではほんの少しの修正もすぐに組み込むことが特徴
継続的デリバリー or CD
CIで修正しテスト後に問題なければ本番環境にすぐに組み込む
前述のCIと組み合わせCI/CDとして利用されるのが一般的


吉武一希
  14:17
分析と設計①
要件定義や設計の中での話し合いなどで議事録だけの確認で進むことも多々あるが認識にずれが生じやすいのでそうさせないためにさまざまな図解を実施する
以下は手法
DFD：データの流れを表現する図
以下構成
源泉：流れてくるデータの出発点であり、終着点
顧客が注文を入力する。
注文を入力したものが顧客に返ってくる
プロセス：データの操作などの処理
注文を処理する
データフロー：データの入出力の流れ
顧客から注文情報がプロセスに渡され、データベースに保存される。
データストア：DBなどのデータを溜め込む場所
注文情報をデータベースに保存する
E-R図：各要素ごとの関係を表現する
以下構成
エンティティ：システム化の対象となる要素のこと。要はテーブル
逆にシステムで扱わないものはエンティティにならない
アトリビュートはエンティティに関連する属性（カラム）のこと
リレーションシップはテーブル同士で何らかのやりとりを行う必要があるものでエンティティの中身（データ）を複数持てるか、そうでないかなどの関係性の詳細も表している


吉武一希
  2月27日 15:00
分析・設計　②
UML：分析・設計で使われる14種類の図解の記述法
以下はUMLの一部紹介
ユースケース図：利用者目線で何ができるかを棒人間を使った図で表現する
以下構成
アクター：システムの利用者
ユースーケース：利用者から見た、システムが提供する各機能のこと
要は機能のことだが、利用者に理解しやすいようにわかりやすく言い換えられている
例
開発側）支払い処理：ユーザーが入力した支払い情報を処理し、注文を確定する。
アクター側）商品購入：ユーザーが商品を購入する。
アクターの立ち位置により、ユースケースも異なる
ステートマシン図：状態の流れを表す図
丸：特定の状態を表現
矢印：特定の操作
操作を行うことで別の状態に遷移したりする
特定の条件において変化するようなシステムに適した図のこと
アクティビティ図：処理の流れを表現している
フローチャートの発展版
アクティビティ図とはシステム開始から終了までに必要なシステム・アクターの行動順序を視覚的に表現した図
アクター：システムと相互作用する外部要素（ユーザー、他のシステムなど）
コンポーネント図：コンポーネント間の関係を図示
以下は間違えやすい
コンポーネント：それ自体が独立して動作するプログラムだが外部から利用することも可能
モジュール：他のプログラムと連携することを目的としたプログラム
クラス図：クラス構成と他クラスとの関係を表現
オブジェクト図と間違えやすい
こちらは中身がない定義と関わっているクラスとの関係を図示しているだけ
オブジェクト図：クラスから作成したインスタンスを表現
クラスで関連していたクラス間の関係が実際のデータにしていることでわかりやすくなっている
シーケンス図：順番を時系列で表現
以下記号意味とその構成
ライフライン（Lifeline）:
記号: 垂直に伸びる破線。
意味: オブジェクトやアクターの存在を表し、時間の経過とともにそのオブジェクトがアクティブであることを示す。
アクティベーションバー（Activation Bar）:
記号: ライフライン上の縦の長方形。
意味: オブジェクトが特定の操作やメソッドを実行している期間を示す。
メッセージ（Message）:
記号: ライフライン間の水平矢印。
意味: オブジェクト間で送信されるメッセージを表す。
同期メッセージ（Synchronous Message）: 実線の矢印で、メッセージを送った後に応答を待つ。
非同期メッセージ（Asynchronous Message）: 点線の矢印で、メッセージを送った後に応答を待たない。
戻りメッセージ（Return Message）:
記号: 点線の矢印。
意味: メッセージの応答を示す。例えば、メソッド呼び出しの結果を返す。
自メッセージ（Self-Message）:
記号: ライフライン上のループする矢印。
意味: オブジェクトが自身に対してメソッドや処理を呼び出すことを示す。
オプティカルフレーム（Optional Frame）:
記号: 四角い枠で囲まれた部分。
意味: 条件に基づいて実行されるオプションの動作やアクションを示す。
条件分岐（Alternative Frame）:
記号: 四角い枠で囲まれ、内部に複数のセクションがある。
意味: 条件によって異なるパスを取る分岐を示す（例：if-else文）